<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1421200577114">{:repl-history {:ide [], :local [&quot;(defn hello [] \&quot;goodnight moon\&quot;)&quot; &quot;(hello)&quot; &quot;(defn lenStr [y] (.length (.toString y)))&quot; &quot;(defn schwartz [x f]\n  (map #(nth %1 0)\n       (sort-by #(nth %1 1)\n                (map #(let [w %1] (list w (f w)))x))))&quot; &quot;(schwartz [\&quot;sads\&quot; \&quot;21\&quot; \&quot;ssssewe\&quot; \&quot;22323\&quot; \&quot;223\&quot; \&quot;s\&quot;])&quot; &quot;(schwartz [\&quot;sads\&quot; \&quot;21\&quot; \&quot;ssssewe\&quot; \&quot;22323\&quot; \&quot;223\&quot; \&quot;s\&quot;] lenStr)&quot; &quot;'(1 2 3 4 5)&quot; &quot;(quote (1 23 45 32 545))&quot; &quot;(vector 1 2 3)&quot; &quot;(vec '(1 2 3 4 5))&quot; &quot;[1 2 3 4 5 4 5 2]&quot; &quot;[sa dsa 33 r2 13]&quot; &quot;[\&quot;ssa\&quot; 2 \&quot;dsadsa\&quot; \&quot;321\&quot; 221]&quot; &quot;(nth '(1 2 3 \&quot;433\&quot; \&quot;rewr\&quot; \&quot;e33\&quot;) 4)&quot; &quot;(def foo {\&quot;aaa\&quot; \&quot;111\&quot; \&quot;bbb\&quot; 22222})&quot; &quot;foo&quot; &quot;(foo \&quot;aaa\&quot;)&quot; &quot;(foo \&quot;bbb\&quot;)&quot; &quot;(foo \&quot;2222\&quot;)&quot; &quot;(def martijn {:name \&quot;Martijn Verburg\&quot;,:city \&quot;London\&quot;,:area \&quot;Highbury\&quot;})&quot; &quot;(:name martijn)&quot; &quot;(:city martijn)&quot; &quot;(def ben {:name \&quot;ben Evans\&quot;,:city \&quot;London\&quot;,:area: \&quot;Holloway\&quot;})&quot; &quot;(def ben {:name \&quot;ben Evans\&quot;,:city \&quot;London\&quot;,:area \&quot;Holloway\&quot;})&quot; &quot;(def authors [ben martijn])&quot; &quot;(map ( fn [y] (:name y)))&quot; &quot;(map ( fn [y] (:name y)) authors)&quot; &quot;#{\&quot;apple\&quot; \&quot;air\&quot; \&quot;water\&quot;}&quot; &quot;(+ 3 4)&quot; &quot;(def add [x y] (+ x y))&quot; &quot;(defn add [x y] (+ x y))&quot; &quot;(add 3 4)&quot; &quot;(+ 2 3 4 56)&quot; &quot;(def list-int '(1 2 3 4))&quot; &quot;(def vect-int （vec list-int）)&quot; &quot;(def vect-int (vec list-int))&quot; &quot;(identical? list-int vect-int)&quot; &quot;(def const-fun1 [y] 1)&quot; &quot;(defn const-fun1 [y] 1)&quot; &quot;(defn iden-fun [y] y)&quot; &quot;(defn list-maker-fun [x f]\n  (map (fn [z] (let [w z]\n                 (list w (f w))))x))&quot; &quot;(list-maker-fun [\&quot;a\&quot;] const-fun1)&quot; &quot;(list-maker-fun [\&quot;a\&quot; \&quot;b\&quot;] const-fun1)&quot; &quot;(list-maker-fun [3 4 65] iden-fun)&quot; &quot;(schwartz [33 452 53 42 555] ident-fun) &quot; &quot;(schwartz [33 452 53 42 555] iden-fun) &quot; &quot;(defn like-for [counter]\n  (loop [ctr counter]\n    (println ctr)\n    (if (&lt;ctr 10)\n      (recur (inc ctr))\n      ctr)))&quot; &quot;(defn like-for [counter]\n  (loop [ctr counter]\n    (println ctr)\n    (if (&lt; ctr 10)\n      (recur (inc ctr))\n      ctr)))&quot; &quot;(like-for 100)&quot; &quot;(like-for 60)&quot; &quot;(like-for 6)&quot; &quot;(defn like-for [counter]\n  (loop [ctr counter]\n    (println ctr)\n    (if (&lt; ctr 100)\n      (recur (inc ctr))\n      ctr)))&quot; &quot;(like-for 99)&quot; &quot;(like-for 1)&quot; &quot;(def adder [constToAdd] #(+ constToAdd %1))&quot; &quot;(defn adder [constToAdd] #(+ constToAdd %1))&quot; &quot;(def plus2 (adder 2))&quot; &quot;(plus2 222)&quot; &quot;(defn plus100 (adder 100))&quot; &quot;(def plus100 (adder 100))&quot; &quot;(plus100 22)&quot; &quot;(rest '(1 2 3))&quot; &quot;(frist (1 2 43 54))&quot; &quot;(frist '(1 2 43 54))&quot; &quot;(first '(1 2 43 54))&quot; &quot;(reset [1 23 45])&quot; &quot;(rest [1 23 45])&quot; &quot;(seq ())&quot; &quot;(seq [])&quot; &quot;(seq '(1 2 3 4))&quot; &quot;(seq [22 1 er yt wer])&quot; &quot;(seq [22 1 \&quot;re\&quot; \&quot;fdsw\&quot; \&quot;fdsf\&quot; \&quot;fdsffd\&quot;])&quot; &quot;(cons 1 [2 34 43])&quot; &quot;(every? is-prime [2 3 5 7 11])&quot; &quot;(defn next-big-n [n] (let [new-val (+ 1 n)]\n                       (lazy-seq (\n                                   cons new-val (next-big-n new-val)\n                                   ))))&quot; &quot;(defn natural-k [k]\n  (concat [k] (next-big-n k)))&quot; &quot;(take 10 (natural-k 3))&quot; &quot;(defn const-fun-arity1\n  ([] 1)\n  ([x] 1)\n  ([x&amp;more] 1))&quot; &quot;(defn const-fun-arity1\n  ([] 1)\n  ([x] 1)\n  ([x &amp; more] 1))&quot; &quot;(const-fun-arity1 1)&quot; &quot;(const-fun-arity1 1 2)&quot; &quot;(defn const-fun-arity1\n  ([] 0)\n  ([x] 1)\n  ([x &amp; more] \&quot;more\&quot;))\n&quot; &quot;(const-fun-arity1 1 2 3)&quot; &quot;(const-fun-arity1)&quot; &quot;(const-fun-arity1 1 )&quot; &quot;(System/getProperty \&quot;java.vm.version\&quot;)&quot; &quot;(import '(java.util.concurrent CountDownLatch LinkedBlockingQueue))&quot; &quot;(def cdl (new CountDownLatch 2))&quot; &quot;(.getClass \&quot;test\&quot;)&quot; &quot;(.getClass 2.3)&quot; &quot;(.getClass [12 34 534])&quot; &quot;(.getClass '(1 2 3 4))&quot; &quot;(.getClass (fn [] \&quot;Hello world\&quot;))&quot; &quot;(import '(java.util.concurrent Executors LinkedBlockingQueue TimeUnit)) &quot; &quot;(def stpe (Executors/newScheduledThreadPool 2))&quot; &quot;(def lbq (LinkedBlockingQueue.))&quot; &quot;(def msgRdr (proxy [Runnable] []\n              (run [] (.toString (.poll lbq)))))&quot; &quot;(def rdrHndl (.scheduleAtFixedRate stpe msgRdr 10 10 TimeUnit/MILLISECONDS))&quot; &quot;(rdrHndl)&quot; &quot;rdrHndl&quot; &quot;(import '(java.util ArrayList LinkedList))&quot;], :remote []}}</component>
</project>

